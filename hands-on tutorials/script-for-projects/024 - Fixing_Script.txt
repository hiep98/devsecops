######################### update existing k8s-deployment.sh ######################### 
#!/bin/bash

#k8s-deployment.sh

sed -i "s#replace#${imageName}#g" k8s_deployment_service.yaml
# kubectl -n default get deployment ${deploymentName} > /dev/null

# if [[ $? -ne 0 ]]; then
#     echo "deployment ${deploymentName} doesnt exist"
#     kubectl -n default apply -f k8s_deployment_service.yaml
# else
#     echo "deployment ${deploymentName} exist"
#     echo "image name - ${imageName}"
#     kubectl -n default set image deploy ${deploymentName} ${containerName}=${imageName} --record=true
# fi


kubectl -n default apply -f k8s_deployment_service.yaml
######################### update existing k8s-deployment.sh ######################### 




######################### update existing k8s_deployment_service.yaml #########################
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: devsecops
  name: devsecops
spec:
  replicas: 2
  selector:
    matchLabels:
      app: devsecops
  strategy: {}
  template:
    metadata:
      labels:
        app: devsecops
    spec:
      volumes:
      - name: vol
        emptyDir: {}
      serviceAccountName: default
      containers:
      - image: replace
        name: devsecops-container
        volumeMounts:
        - mountPath: /tmp
          name: vol
        securityContext:
          runAsNonRoot: true
          runAsUser: 100
          readOnlyRootFilesystem: true
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: devsecops
  name: devsecops-svc
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: devsecops
  type: NodePort
######################### update existing k8s_deployment_service.yaml #########################