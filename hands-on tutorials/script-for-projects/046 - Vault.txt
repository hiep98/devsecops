Create a new namespace called vault-devsecops.


kubectl create namespace vault-devsecops



Add helm hashicorp vault repo


helm repo add hashicorp https://helm.releases.hashicorp.com



Install vault using helm:


helm install vault --set='ui.enabled=true' -n vault-devsecops \
--set='ui.serviceType=NodePort' \
--set='server.dataStorage.enabled=false' hashicorp/vault --version 0.17.0


To check the App Version of the vault, run the below command:


helm list -n vault-devsecops



App Version of vault should be 1.8.4.



Edit the vault-ui service to change the nodePort:


kubectl edit service vault-ui -n vault-devsecops



Change the nodePort to 30060 and save the changes.

To check if the vault is sealed or not, run the below command:


kubectl exec -it vault-0 -n vault-devsecops -- vault status



You must bee seeing value Sealed true, which means it is in sealed state.
When a Vault server is started, it starts in a sealed state.

Execute into the vault-0 pod with below command:


kubectl exec -it vault-0 -n vault-devsecops -- sh



Run below command to generate the initial root token:


vault operator init



When you run the command to generate token, in the output you will get 5 unseal keys. Unseal any of the 3 keys.


vault operator unseal <key1>
vault operator unseal <key2>
vault operator unseal <key3>
Execute into the vault-0 pod with below command:


kubectl exec -it vault-0 -n vault-devsecops -- sh



Login into the vault with root token as below:


vault login <root-token>



Enable path as below:


vault secrets enable -path=devsecops kv-v2


Execute into the vault-0 pod with below command:


kubectl exec -it vault-0 -n vault-devsecops -- sh



Put the secret values in devsecops path:


vault kv put devsecops/secret-data username=devsecops password=skdjD432JDjd apikey=dgg7B3BaaeBleqE


Execute into the vault-0 pod with below command:


kubectl exec -it vault-0 -n vault-devsecops -- sh



Create a policy file of any name, let's say /home/vault/policy.hcl:


path "devsecops/secret-data" {
capabilities = ["read"]
}



Write the policy:


vault policy write devsecops-app /home/vault/policy.hcl


Execute into the vault-0 pod with below command:


kubectl exec -it vault-0 -n vault-devsecops -- sh



Enable the kubernetes authentication method:


vault auth enable kubernetes



Configure vault to talk to the Kubernetes cluster:


vault write auth/kubernetes/config \
token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"  \
kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \
kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt



Configure the required role:


vault write auth/kubernetes/role/phpapp \
bound_service_account_names=devsecops-app \
bound_service_account_namespaces=vault-devsecops \
policies=devsecops-app \
ttl=1h

Deploy the app using php-app-k8s-deploy.yaml template in the vault-devsecops namespace, make sure the service nodePort is 30050.


Return back to the controlplane host:


Build docker image.


cd /root/vault-php-app
docker build -t vault-app:php .



Add the nodePort 30050.


vi php-app-k8s-deploy.yaml



Update the service and add nodePort: 30050 under targetPort: 80:


Apply the template php-app-k8s-deploy.yaml in vault-devsecops namespace.


kubectl apply -f php-app-k8s-deploy.yaml -n vault-devsecops


patch patch-annotations.yaml 
Edit the patch-annotations.yaml file and make the required changes so that it looks like as below:


spec:
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-username: "devsecops/secret-data"
        vault.hashicorp.com/agent-inject-secret-password: "devsecops/secret-data"
        vault.hashicorp.com/agent-inject-secret-apikey: "devsecops/secret-data"
        vault.hashicorp.com/role: "phpapp"



Apply the patch:


kubectl patch deploy php -p "$(cat patch-annotations.yaml)" -n vault-devsecops
